const db = require('../config/db'); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const bcrypt = require('bcryptjs'); // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
const jwt = require('jsonwebtoken'); // ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
require('dotenv').config(); // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env

/****************************************************************
*  authController.js ‚Äî ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô & ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
****************************************************************/

/* ---------- POST /users/register (‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å) ---------- */
exports.register = async (req, res) => {
  const { first_name, last_name, age, gender, username, password } = req.body; // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å request

  // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!first_name || !last_name || !age || !gender || !username || !password) {
    return res.status(400).json({ error: '‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö' }); // ‡∏™‡πà‡∏á error ‡∏ñ‡πâ‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
  }

  const salt = await bcrypt.genSalt(10); // ‡∏™‡∏£‡πâ‡∏≤‡∏á salt ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
  const hashedPassword = await bcrypt.hash(password, salt); // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô

  try {
    // üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const [rs] = await db.query(
      'INSERT INTO users (first_name, last_name, age, gender, username, password_hash) VALUES (?,?,?,?,?,?)',
      [first_name, last_name, age, gender, username, hashedPassword]
    );

    res.status(201).json({ id: rs.insertId, first_name, last_name, username }); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  } catch (err) {
    if (err.code === 'ER_DUP_ENTRY') { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ username ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      return res.status(409).json({ error: '‚ùå Username ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß' }); // ‡πÅ‡∏à‡πâ‡∏á error ‡∏ß‡πà‡∏≤ username ‡∏ã‡πâ‡∏≥
    }
    console.error("REGISTER ERR ‚Üí", err); // log error
    res.status(500).json({ error: 'DB Error' }); // ‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
  }
};

/* ---------- POST /users/login (‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö) ---------- */
exports.login = async (req, res) => {
  const { username, password } = req.body; // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• username ‡πÅ‡∏•‡∏∞ password

  // üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° username
  const [rows] = await db.query('SELECT * FROM users WHERE username = ?', [username]); 
  console.log('DEBUG ‚ñ∏ rows =', rows); // log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

  // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
  if (!rows.length || !(await bcrypt.compare(password, rows[0].password_hash))) {
    return res.status(401).json({ error: '‚ùå Invalid username or password' }); // ‡πÅ‡∏à‡πâ‡∏á error ‡∏ñ‡πâ‡∏≤ login ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô
  }

  const userData = { id: rows[0].id, username: rows[0].username, role: rows[0].role }; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö token
  const accessToken = jwt.sign(userData, process.env.JWT_SECRET, { expiresIn: '2h' }); // ‡∏™‡∏£‡πâ‡∏≤‡∏á accessToken
  const refreshToken = jwt.sign({ id: rows[0].id }, process.env.REFRESH_SECRET, { expiresIn: '7d' }); // ‡∏™‡∏£‡πâ‡∏≤‡∏á refreshToken

  // üîπ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ refreshToken ‡πÉ‡∏ô cookie
  res.cookie('refreshToken', refreshToken, {
    httpOnly: true, // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á cookie ‡∏à‡∏≤‡∏Å JavaScript
    secure: process.env.NODE_ENV === 'production', // ‡πÉ‡∏ä‡πâ https ‡πÉ‡∏ô production
    sameSite: 'Strict', // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Cross-Site Request Forgery (CSRF)
    maxAge: 7 * 24 * 60 * 60 * 1000, // ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á token ‡∏Ñ‡∏∑‡∏≠ 7 ‡∏ß‡∏±‡∏ô
  });

  res.json({ accessToken }); // ‡∏™‡πà‡∏á accessToken ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
};

/* ---------- POST /refresh-token (‡∏≠‡∏≠‡∏Å Access Token ‡πÉ‡∏´‡∏°‡πà) ---------- */
exports.refreshToken = async (req, res) => {
  console.log("üîç Cookies received:", req.cookies); // log cookie ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
  const refreshToken = req.cookies.refreshToken; // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ refreshToken ‡∏à‡∏≤‡∏Å cookie
  console.log("üîπ Extracted refreshToken:", refreshToken); // log token ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏≠‡∏≠‡∏Å‡∏°‡∏≤

  // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ refreshToken ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!refreshToken) {
    return res.status(401).json({ error: '‚ùå No refreshToken provided' }); // ‡∏™‡πà‡∏á error ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token
  }

  try {
    const decoded = jwt.verify(refreshToken, process.env.REFRESH_SECRET); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ refreshToken
    console.log("üîπ Decoded Token:", decoded); // log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß
    
    const accessToken = jwt.sign({ id: decoded.id }, process.env.JWT_SECRET, { expiresIn: '2h' }); // ‡∏™‡∏£‡πâ‡∏≤‡∏á accessToken ‡πÉ‡∏´‡∏°‡πà
    res.json({ accessToken }); // ‡∏™‡πà‡∏á token ‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
  } catch (err) {
    console.error("‚ùå JWT Error:", err); // log ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    res.status(403).json({ error: '‚ùå Invalid refreshToken' }); // ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤ token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  }
};

/* ---------- POST /logout (‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö) ---------- */
exports.logout = async (req, res) => {
  res.clearCookie('refreshToken'); // ‡∏•‡∏ö cookie refreshToken ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
  res.json({ message: 'Logged out' }); // ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
};
